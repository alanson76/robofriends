{"version":3,"sources":["redux/reducers.js","redux/store.js","redux/actionTypes.js","components/Card.jsx","components/CardList.jsx","components/Scroll.jsx","components/SearchBox.jsx","components/ErrorBoundary.jsx","containers/App.jsx","redux/actions.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","reducers","combineReducers","searchRobots","state","action","type","payload","requestRobots","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","createLogger","Card","this","props","id","name","email","className","alt","src","Component","CardList","renderRobots","map","index","key","Scroll","style","overflowY","height","children","SearchBox","placeholder","onChange","searchChange","ErrorBoundary","hasError","info","setState","App","filteredRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","connect","erorr","dispatch","event","target","value","a","axios","then","res","data","catch","err","message","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f70b6298.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './actionTypes';\r\n\r\nconst initialStateSearch = {\r\n  searchField: '',\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return {\r\n        ...state,\r\n        searchField: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: '',\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...state, isPending: true };\r\n\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return { ...state, robots: action.payload, isPending: false };\r\n\r\n    case REQUEST_ROBOTS_FAIL:\r\n      return { ...state, error: action.payload, isPending: false };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\n\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst reducers = combineReducers({\r\n  searchRobots,\r\n  requestRobots,\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(\r\n  reducers,\r\n  /* preloadedState, */ composeEnhancers(\r\n    applyMiddleware(thunkMiddleware, createLogger())\r\n  )\r\n);\r\nexport default store;\r\n// export default createStore(reducers, applyMiddleware(createLogger()));\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';\r\n","import React, { Component } from 'react';\r\n\r\nexport class Card extends Component {\r\n  render() {\r\n    const { id, name, email } = this.props;\r\n    return (\r\n      <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n        <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nexport class CardList extends Component {\r\n  renderRobots = () =>\r\n    this.props.robots.map(({ id, name, email }, index) => {\r\n      return <Card key={index} id={id} name={name} email={email} />;\r\n    });\r\n\r\n  render() {\r\n    return <div>{this.renderRobots()}</div>;\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nfunction Scroll(props) {\r\n  // console.log(props.children)\r\n  return (\r\n    <div style={{ overflowY: 'scroll', height: '900px' }}>{props.children}</div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nexport class SearchBox extends Component {\r\n  render() {\r\n    return (\r\n      <div className='pa2'>\r\n        <input\r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='text'\r\n          placeholder='search robots ... '\r\n          onChange={this.props.searchChange}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react'\r\n\r\nexport class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Ooops. There is an error</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary\r\n","import React, { Component } from 'react'\r\n\r\n//redux\r\nimport { connect } from 'react-redux'\r\nimport { setSearchField, requestRobots } from '../redux/actions'\r\n\r\n//components\r\nimport CardList from '../components/CardList'\r\nimport Scroll from '../components/Scroll'\r\nimport SearchBox from '../components/SearchBox'\r\n\r\n//css\r\nimport 'tachyons'\r\nimport './App.css'\r\n\r\n//error catch\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nexport class App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots()\r\n  }\r\n\r\n  filteredRobots = () => {\r\n    const { searchField, robots } = this.props\r\n    return robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { onSearchChange, isPending } = this.props\r\n    return isPending ? (\r\n      <h1>Loading...</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots={this.filteredRobots()} />\r\n          </ErrorBoundary>\r\n        </Scroll>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    erorr: state.requestRobots.error,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)\r\n","import axios from 'axios';\r\n\r\nimport {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAIL,\r\n} from './actionTypes';\r\n\r\nexport const setSearchField = (text) => {\r\n  return {\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text,\r\n  };\r\n};\r\n\r\nexport const requestRobots = () => async (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  axios('http://jsonplaceholder.typicode.com/users')\r\n    .then((res) =>\r\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: res.data })\r\n    )\r\n    .catch((err) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAIL, payload: err.message })\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}